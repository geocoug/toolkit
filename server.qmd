---
title: "Server"
pagetitle: "Server"
description: "Administration"
image: "/static/server.png"
format:
    html:
        # https://quarto.org/docs/output-formats/html-code.html
        code-fold: true
jupyter: python3
execute:
    echo: false
---

## Permissions

### Syntax

General: `_rwxrwxrwx 1 owner group`

`_ | rwx | rwx | rwx` = Special | Owner | Group | All Users

#### Shorthand

- `4` | `r` = Read
- `2` | `w` = Write
- `1` | `x` = Execute

#### Detailed

- `0` = `---`
- `1` = `--x`
- `2` = `-w-`
- `3` = `-wx`
- `4` = `r-`
- `5` = `r-x`
- `6` = `rw-`
- `7` = `rwx`

### Commands

`chgrp` = Change group

_Example_: `sudo chgrp -R <group> <folder>`

`chown` = Change ownership

_Example_: `sudo chown -R <user>:<group> <file/folder>`

`chmod` = Change permissions

_Example_: `sudo chmod -R 774 <file/folder>`

Make new files inherit the group: `sudo chmod g+s <folder>`

### Example

Create a shared directory for a group.

1. Create a shared directory for users to access: `/share`

1. Assign users to a common group (staff): `sudo usermod -a -G staff <user>`

1. Verify user groups: `groups <user>`

1. Create shared directory and assign permissions:

    ```bash
    sudo mkdir /share && \
    sudo chgrp -R staff /share && \  # assign group
    sudo chmod -R g+w /share && \  # permissions
    sudo chmod -R +s /share  # inherit permissions for newly created files/folders
    ```

## Server Initialization

Initial Linux server setup steps:

1. Login to server as root: `ssh root@<ip>`
1. Create new admin user: `sudo adduser <user>`
1. Add user to sudo group: `sudo usermod -aG sudo <user>`
1. Disable root login
    1. Open SSH configuration: `sudo vi /etc/ssh/sshd_config`
    1. Set `PermitRootLogin` to `no`
1. Configure Uncomplicated Firewall (UFW)
    1. Allow SSH connections: `sudo ufw allow OpenSSH`
    1. Open port 80 and 443 for Apache: `sudo ufw allow 'Apache Full'`
    1. Turn on firewall: `sudo ufw enable`
    1. Check: `sudo ufw status verbose`
1. Reboot the server: `sudo reboot`
1. Login as new user: `ssh <user>@<ip>`
1. Check for package updates `apt list --upgradable`
1, Upgrade packages `sudo apt upgrade`
1. Show system info: `uname -a`
1. Even though the kernel was updated, need to reboot to take effect: `sudo reboot`
1. Just to be sure: `sudo apt update && sudo apt upgrade`
1. Shutdown for backup/snapshot `sudo shutdown -h now`
1. After snapshot, navigate to provider website and restart machine

## Python Web App

### Flask App Configuration

1. Clone repository:

    ```bash
    sudo mkdir /etc/local/webs && \
    cd /etc/local/webs && \
    sudo git clone https://github.com/app.git && \
    sudo chown -R <user>:<user> app && \
    cd app
    ```

1. Create python virtual environment & install dependencies:

    ```bash
    python -m venv .venv && \
    source .venv/bin/activate && \
    python -m pip install -r requirements.txt
    ```

1. Configure WSGI - `/usr/local/webs/app/app.wsgi`:

    ```python
    #!/usr/bin/python
    import sys
    import logging
    import os

    APP_DIR = '/usr/local/webs/app'
    os.environ["APP_DIR"] = APP_DIR

    logging.basicConfig(stream=sys.stderr)
    sys.path.insert(0, APP_DIR)

    from app import app as application
    ```

1. Update owner:group

    ```bash
    cd /usr/local/web && \
    sudo chown -R www-data:www-data cmat
    ```

### Apache Configuration

1. Create custom Apache log directory:

    ```bash
    sudo mkdir /usr/local/webs/apache-logs && \
    sudo touch /usr/local/webs/apache-logs/app/error.log && \
    sudo touch /usr/local/webs/apache-logs/app/access.log && \
    sudo chown -R www-data:www-data /usr/local/webs/apache-logs
    ```

1. Create configuration file:

    ```bash
    cd /etc/apache2/sites-available && \
    sudo vi app.conf
    ```
    
1. Configuration - `app.conf`:

    ```apache
    <VirtualHost *:80>
        ServerName {DNS}

        ServerSignature Off

        RewriteEngine On
        RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]

        ErrorLog /var/log/apache2/redirect.error.log
        LogLevel warn
    </VirtualHost>

    <VirtualHost *:443>
        ServerAdmin webmaster@localhost
        ServerName {DNS}

        DocumentRoot /usr/local/webs/app

        WSGIDaemonProcess web-app threads=5 python-home=/usr/local/webs/app/.venv
        WSGIProcessGroup web-app
        WSGIScriptAlias / /usr/local/webs/app/app.wsgi
        WSGIPassAuthorization On
        <Directory /usr/local/webs/app>
                Order allow,deny
                Allow from all
        </Directory>

        <Location />
                Require all granted
        </Location>

        ErrorLog /usr/local/webs/apache-logs/app/error.log
        CustomLog /usr/local/webs/apache-logs/app/access.log combined

        SSLEngine on
        SSLCertificateFile /etc/letsencrypt/live/{DNS}/fullchain.pem
        SSLCertificateKeyFile /etc/letsencrypt/live/{DNS}/privkey.pem
        Include /etc/letsencrypt/options-ssl-apache.conf
    </VirtualHost>
    ```

1. Test configuration:

    ```bash
    sudo apache2ctl configtest
    ```

1. Enable the site

    ```bash
    sudo a2ensite app.conf
    ```

1. Restart Apache service

    ```bash
    sudo systemctl restart apache2
    ```

## Jupyter Server

1. Create `jupyter` user

    ```bash
    sudo adduser jupyter && \
    sudo usermod -a -G staff jupyter
    sudo su jupyter && \
    ```

1. Install Jupyter Lab

    ```bash
    source /home/jupyter/.venv/bin/activate && \
    python -m pip install jupyterlab && \
    jupyter-lab --generate-config
    ```

1. Configure Jupyter

    ```python
    c.NotebookApp.ip = '*'
    c.NotebookApp.notebook_dir = '/home/jupyter/notebooks/'
    c.NotebookApp.open_browser = False
    c.NotebookApp.password = '' # hashed password
    c.NotebookApp.port = 9999
    ```

1. Configure Apache:

    ```apache
    <VirtualHost *:80>
        ServerName <DNS ENTRY>
        ServerSignature Off

        ErrorLog /var/log/apache2/redirect.error.log
        LogLevel warn

        ProxyPreserveHost On
        ProxyPass "/" "http://localhost:9999/"
        ProxyPassReverse "/" "http://localhost:9999/"

        RewriteEngine on
        RewriteCond %{SERVER_NAME} =<DNS ENTRY>
        RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
    </VirtualHost>

    <IfModule mod_ssl.c>
        <VirtualHost *:443>
            ServerName <DNS ENTRY>
            ServerSignature Off

            ErrorLog /var/log/apache2/redirect.error.log
            LogLevel warn

            ProxyPreserveHost On
            ProxyPass "/" "http://localhost:9999/"
            ProxyPassReverse "/" "http://localhost:9999/"

        <Location "/api/kernels/">
            ProxyPass        ws://localhost:9999/api/kernels/
                ProxyPassReverse ws://localhost:9999/api/kernels/
        </Location>

            SSLCertificateFile /etc/letsencrypt/live/<DNS ENTRY>/fullchain.pem
            SSLCertificateKeyFile /etc/letsencrypt/<DNS ENTRY>/privkey.pem
            Include /etc/letsencrypt/options-ssl-apache.conf
        </VirtualHost>
    </IfModule>
    ```

1. Enable Apache modules

    ```bash
    sudo a2enmod proxy
    sudo a2enmod proxy_http
    sudo a2enmod proxy_wstunnel
    ```

1. Generate SSL certs

    ```bash
    sudo certbot --apache certonly
    ```

1. Enable the site

    ```bash
    sudo a2ensite jupyter.conf && \
    sudo systemctl reload apache2 && \
    sudo systemctl status apache2
    ```

1. Create the Jupyter service: `/lib/systemd/system/jupyter.service`

    ```ini
    # service name:     jupyter.service
    # path:             /lib/systemd/system/jupyter.service

    [Unit]
    Description=Jupyter Notebook Server

    [Service]
    Type=simple
    PIDFile=/run/jupyter.pid
    ExecStart=/bin/bash -c "/home/jupyter/.venv/bin/jupyter lab --no-browser"
    User=jupyter
    Group=staff
    WorkingDirectory=/home/jupyter/notebooks
    Restart=always
    RestartSec=30

    [Install]
    WantedBy=multi-user.target
    ```

1. Enable the service

    ```bash
    sudo systemctl daemon-reload && \
    sudo systemctl start jupyter.service && \
    sudo service jupyter status
    ```

## Rstudio Server

1. Install:

    ```bash
    wget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2022.07.2-576-amd64.deb && \
    sudo gdebi rstudio-server-2022.07.2-576-amd64.deb && \
    rm rstudio-server-2022.07.2-576-amd64.deb && \
    sudo adduser rstudio
    ```

1. Apache config

    ```apache
    <VirtualHost *:80>
        ServerName <DNS ENTRY>
        ServerSignature Off

        ErrorLog /var/log/apache2/redirect.error.log
        LogLevel warn

        ProxyPreserveHost On
        ProxyPass "/" "http://localhost:8787/"
        ProxyPassReverse "/" "http://localhost:8787/"

        RewriteEngine on
        RewriteCond %{SERVER_NAME} =<DNS ENTRY>
        RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
    </VirtualHost>

    <IfModule mod_ssl.c>
        <VirtualHost *:443>
            ServerName <DNS ENTRY>
            ServerSignature Off

            ErrorLog /var/log/apache2/redirect.error.log
            LogLevel warn

            ProxyPreserveHost On
            ProxyPass "/" "http://localhost:8787/"
            ProxyPassReverse "/" "http://localhost:8787/"

            SSLCertificateFile /etc/letsencrypt/live/<DNS ENTRY>/fullchain.pem
            SSLCertificateKeyFile /etc/letsencrypt/live/<DNS ENTRY>/privkey.pem
            Include /etc/letsencrypt/options-ssl-apache.conf
        </VirtualHost>
    </IfModule>
    ```

1. Generate SSL certs

    ```bash
    sudo certbot --apache certonly
    ```

1. Enable the site

    ```bash
    sudo a2ensite rstudio.conf && \
    sudo systemctl reload apache2 && \
    sudo systemctl status apache2
    ```
