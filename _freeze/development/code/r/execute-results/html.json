{
  "hash": "ac4f76e617a390c939856baa32724d6f",
  "result": {
    "markdown": "---\ntitle: R\ndescription: R programming language\nimage: https://www.r-project.org/logo/Rlogo.svg\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(librarian)){\n  remotes::install_github(\"DesiQuintans/librarian\")\n  library(librarian)\n}\nshelf(\n  # database\n  DBI, RPostgres,\n  # spatial\n  ggmap, leaflet, ggplot2, plotly,\n  r-spatial/mapview,\n  sf, sp,\n  lwgeom,\n  # tidyverse\n  dplyr, purrr, readr, tibble, tidyr,\n  reticulate,\n  # todo: use these\n  # googledrive,\n  # report\n  DT, gt, htmltools, htmlwidgets, kableExtra, knitr, \n  markdown, shiny, webshot,\n  # utility\n  fs, glue, here, png, scales, stringr, urltools)\n\nhere <- here::here\n```\n:::\n\n\n## Resources\n\n- [R Markdown Basics](https://rmarkdown.rstudio.com/authoring_basics.html)\n- [R Markdown Reference Guide](https://bookdown.org/yihui/rmarkdown/)\n- [Flexdashboard](https://rmarkdown.rstudio.com/flexdashboard/)\n- [Awesome public datasets](https://github.com/awesomedata/awesome-public-datasets)\n\n---\n\n## Languages\n\n### R\n\n\n::: {.cell}\n\n```{.r .fold-show .cell-code}\nx <- 5 * 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n\n### SQL\n\nThere are a couple ways to connect to a database instance. These examples show how to connect to a local PostgreSQL instance, and how to use the connection information to query a database.\n\n#### Option 1\n\nCreate connection chunk, then call connection in each subsequent chunk.\n\n```{.r connSQL, class.source='fold-show'}\nlibrary(DBI)\n\npass <- readLines(\"../../pwd.txt\")\ndb = dbConnect(\n  RPostgres::Postgres(),\n  dbname   = \"personal\",\n  host     = \"localhost\",\n  port     = 5432,\n  user     = \"cgrant\",\n  password = pass\n)\n```\n\n```{.sql, connection=db, eval=F}\nselect * from workouts limit 10;\n```\n\n#### Option 2\n\nSet default connection in the setup chunk (pretend its the setup chunk).\n\n```{.r setup-v2, eval=F, class.source='fold-show'}\nlibrary(DBI)\n\ndb = dbConnect(\n  RPostgres::Postgres(),\n  dbname   = \"personal\",\n  host     = \"localhost\",\n  port     = 5432,\n  user     = \"cgrant\",\n  password = pass\n)\nknitr::opts_chunk$set(connection = \"db\")\n```\n\nNow you dont have to specify the connection for each chunk.\n\n```{.sql, eval=F}\nselect * from workouts limit 10;\n```\n\n### Python\n\nTo use a Python engine, you need to call `library(reticulate)` [link](https://rstudio.github.io/reticulate/)\n\n```{.r, class.source='fold-show'}\n# install.packages(\"reticulate\")\n\nSys.setenv(RETICULATE_PYTHON = \"/Users/cgrant/venvs/dev/bin/python\")\nlibrary(reticulate)\npy_config()\n```\n\nNow you can run Python code\n\n\n::: {.cell}\n\n```{.python .fold-show .cell-code}\nx = 4 * 4\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16\n```\n:::\n:::\n\n\nYou can import libraries as normal\n\n\n::: {.cell}\n\n```{.python .fold-show .cell-code}\nimport pandas as pd\n\nvals = {\"col1\": ['a', 'b', 'c', 'd'], \"col2\": [1, 10, 100, 1000]}\ndf = pd.DataFrame(vals)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  col1  col2\n0    a     1\n1    b    10\n2    c   100\n3    d  1000\n```\n:::\n:::\n\n\nAccess objects created within Python chunks from R using `py$<var>`\n\n\n::: {.cell}\n\n```{.r .fold-show .cell-code}\nlibrary(DT)\ndatatable(py$df)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in crosstalk::is.SharedData(data): object 'py' not found\n```\n:::\n:::\n\n\n## Mapping\n\n### Leaflet\n\nUse the leaflet map below to explore.\n\n\n::: {.cell}\n\n```{.r .fold-show .cell-code}\nlibrary(leaflet)\nlibrary(dplyr)\n\nleaflet() %>% \n  setView(lng=-122.90486, lat=47.03576, zoom=16) %>% \n  addTiles() %>% \n  addMarkers(lng=-122.90486, lat=47.03576, popup=\"WA State Capitol\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-ec1058e33f49ff3db819\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ec1058e33f49ff3db819\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"setView\":[[47.03576,-122.90486],16,[]],\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[47.03576,-122.90486,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"WA State Capitol\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[47.03576,47.03576],\"lng\":[-122.90486,-122.90486]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Plots\n\n### Temperature\n\n[Reference](https://rstudio-pubs-static.s3.amazonaws.com/392197_d66db681e0fa4ab1b19b85f8ce38aacc.html)\n[Source](https://www.ncdc.noaa.gov/cdo-web/datasets/LCD/stations/WBAN:24233/detail)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nlibrary(dplyr)\n\nf <- \"./static/NOAA-SeaTac_cleaned.csv\"\ndt <- read.csv(f)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n:::\n\n```{.r .cell-code}\ndf <- as.data.frame(dt)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame.default(dt): cannot coerce class '\"function\"' to a data.frame\n```\n:::\n\n```{.r .cell-code}\nupdatemenus <- list(\n  list(\n    active = 0,\n    x = -.125,\n    type= 'buttons',\n    buttons = list(\n      list(\n        label = \"Wet Bulb\",\n        method = \"update\",\n        args = list(list(visible = c(TRUE, \"legendonly\")))),\n      list(\n        label = \"Dry Bulb\",\n        method = \"update\",\n        args = list(list(visible = c(\"legendonly\", TRUE))))\n    )\n  )\n)\n\nplt <- plot_ly(data = df) %>%\n  add_markers(x=as.Date(df$Timestamp), y=df$HourlyWetBulbTemperature, name=\"Wet Bulb\") %>%\n  add_markers(x=as.Date(df$Timestamp), y=df$HourlyDryBulbTemperature, name=\"Dry Bulb\", visible=\"legendonly\") %>%\n  layout(title = \"SeaTac 2020 Temperature Data\", \n         showlegend=FALSE,\n         xaxis=list(zeroline = FALSE,title=\"Date\"),\n         yaxis=list(zeroline = FALSE,title=\"Temperature (F)\"),\n         updatemenus=updatemenus)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in layout(., title = \"SeaTac 2020 Temperature Data\", showlegend = FALSE, : unused arguments (title = \"SeaTac 2020 Temperature Data\", showlegend = FALSE, xaxis = list(zeroline = FALSE, title = \"Date\"), yaxis = list(zeroline = FALSE, title = \"Temperature (F)\"), updatemenus = updatemenus)\n```\n:::\n\n```{.r .cell-code}\nplt\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'plt' not found\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}