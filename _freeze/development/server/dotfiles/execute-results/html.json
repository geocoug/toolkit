{
  "hash": "6c3b253ec93f33241b0f847e66e0682c",
  "result": {
    "markdown": "---\ntitle: Dotfiles\ndescription: My dotfile configurations for MacOS\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\n\n\ndef send_request(request_type: str, url: str, **kwargs) -> requests.Response:\n    try:\n        response = requests.request(request_type.upper(), url, **kwargs)\n        response.raise_for_status()  # Raises an exception if status code >= 400\n        return response\n    except requests.exceptions.RequestException as err:\n        logger.error(f\"{err}. Request type: {request_type}. URL: {url}. Args: {kwargs}\")\n        raise err\n\n\nresponse = send_request(\n    \"GET\", \"https://raw.githubusercontent.com/geocoug/dotfiles/main/.zshrc\", timeout=15\n)\nfor line in response.text.split(\"\\n\"):\n    print(line)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nexport GPG_TTY=$(tty)\n\n# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.\n# Initialization code that may require console input (password prompts, [y/n]\n# confirmations, etc.) must go above this block; everything else may go below.\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n\n# If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n# ZSH_THEME=\"robbyrussell\"\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment one of the following lines to change the auto-update behavior\n# zstyle ':omz:update' mode disabled  # disable automatic updates\nzstyle ':omz:update' mode auto      # update automatically without asking\n# zstyle ':omz:update' mode reminder  # just remind me to update when it's time\n\n# Uncomment the following line to change how often to auto-update (in days).\n# zstyle ':omz:update' frequency 13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=\"true\"\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# You can also set it to another string to have that shown instead of the default red dots.\n# e.g. COMPLETION_WAITING_DOTS=\"%F{yellow}waiting...%f\"\n# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(\n  z\n  aliases\n  gh\n  git\n  docker\n  doctl\n  zsh-syntax-highlighting\n  zsh-autosuggestions\n  web-search\n  copypath\n  copyfile\n  copybuffer\n  macos\n)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\nif [[ -n $SSH_CONNECTION ]]; then\n  export EDITOR='vim'\nelse\n  export EDITOR='vim'\nfi\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# ALIASES\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n# Overwrite standard functions\nalias cat='ccat'\nalias l='exa -1 -g -h -l --git --group-directories-first --icons --sort=Name --time=modified'\nalias la='exa -1 -g -h -l --git --group-directories-first --icons --sort=Name --time=modified -a'\nalias grep='grep --color=auto'\n# Tarball shortcuts\nalias tarup='tar czfv'\nalias tarls='tar tvf'\n# Shortcuts\nalias c='clear'\nalias h='history'\nalias r='source $HOME/.zshrc'\nalias speed='speedtest-cli --simple'\n# Homebrew\nalias casks='brew cu -a --no-brew-update -v'\nalias brewup='brew update; brew upgrade; brew cu -y -a --no-brew-update --cleanup; brew cleanup; brew doctor'\nalias brewun='brew uninstall --zap'\n# Paths\nalias int='cd \"$HOME/GitHub/integral\"'\nalias geo='cd \"$HOME/GitHub/geocoug\"'\nalias cloud='cd \"$HOME/iCloud\"'\n# Ownership\nalias my='sudo chown -R `id -u`'\n# Docker\nalias dkcu='docker compose up --build'\nalias dkcd='docker compose down --rmi local'\nalias dkr='docker run --rm -it'\nalias dke='docker exec -it'\n# Python\n#  Open jupyter lab in the current working direcotry\nalias lab='docker run -it --rm -p 8888:8888 -v $(PWD):/home/jovyan jupyter-lab'\n#  Activate default dev environment\nalias dev='source $HOME/venvs/dev/bin/activate'\n#  Activate the Python venv in the current working directory. Assumes venv is called \".venv\"\nalias venv='source ./.venv/bin/activate'\n# DOTFILE CONFIG\nalias config='git --git-dir=$HOME/GitHub/geocoug/dotfiles/.git --work-tree=$HOME/GitHub/geocoug/dotfiles'\n# Show biggest files in this directory\nalias dusize='sudo du -hs ** | sort -hr | head -10'\n# Git\nalias gs='git status'\n# Get machine IP\nalias ip='ipconfig getifaddr en0'\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# CUSTOM FUNCTIONS\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfunction chpwd() {\n# Automatically load environment variables specific to a directory tree\n    if [ -r $PWD/.env ]; \n    then\n        source $PWD/.env\n    fi\n}\n\nfunction timestamp() {\n    # Print the current timestamp.\n    TIMESTAMP=`date +'%Y-%m-%d %H:%M:%S'`  # (%Z)\n    printf \"$TIMESTAMP\"\n}\n\nfunction pipup() {\n    # Upgrade PIP and all its site packages\n    printf \"[$(timestamp)] Upgrading pip.%b\\n\"\n    python -m pip install --upgrade pip > /dev/null 2>&1\n    printf \"[$(timestamp)] $(python -m pip -V)%b\\n\"\n    if [ `python -m pip list --outdated | wc -l` -ne 0 ];\n    then\n        printf \"[$(timestamp)] Updating outdated packages: \"\n        for LIB in $(python -m pip list --outdated | grep -v \"^\\-\" | cut -d \" \" -f 1 | awk \"NR>1\");\n        do\n            printf \"$LIB \"\n            python -m pip install -U $LIB > /dev/null 2>&1\n        done\n        printf \"%b\\n\"\n        printf \"[$(timestamp)] Updating requirements.txt.%b\\n\"\n        python -m pip freeze > requirements.txt\n    else\n        printf \"[$(timestamp)] Packages are already up to date.%b\\n\"\n    fi\n}\n\nfunction pyenv() {\n    # In the current directory: create and activate a Python venv.\n    # If a requirements.txt file already exists, install those packages,\n    # otherwise install some default packages and create a requirements.txt file.\n\n    # List of default libraries to install in a new Python venv.\n    declare -a DEFAULT_LIBRARIES=(\"pre_commit\" \"ruff\" \"black\" \"pytest\" \"pytest-cov\")\n\n    # Create a Python virtual environment called \".venv\" if one does not exist.\n    # If creating a new venv, install $DEFAULT_LIBRARIES and export a requirements.txt file.\n    if [ -d \".venv\" ];\n    then\n        printf \"[$(timestamp)] Python virtual environment already exists, activating it.%b\\n\"\n        source .venv/bin/activate\n        printf \"[$(timestamp)] $(python -V)%b\\n\"\n    else\n        printf \"[$(timestamp)] No Python virtual environment found, creating one.%b\\n\"\n        /opt/homebrew/bin/python3.11 -m venv .venv\n        source ./.venv/bin/activate\n        printf \"[$(timestamp)] $(python -V)%b\\n\"\n        python -m pip install --upgrade pip > /dev/null 2>&1\n\n        if [ -f \"requirements.txt\" ];\n        then\n            printf \"[$(timestamp)] Found requirements.txt, installing libraries: \"\n            for LIB in $(cat ./requirements.txt);\n            do\n                printf \"$(echo $LIB | awk -F '==|>|<' '{print $1}') \"\n                python -m pip install $LIB > /dev/null 2>&1\n            done\n            printf \"%b\\n\"\n        else\n            printf \"[$(timestamp)] Installing default libraries: \"\n            for LIB in \"${DEFAULT_LIBRARIES[@]}\";\n            do\n                python -m pip install --no-cache-dir $LIB > /dev/null 2>&1\n                printf \"$LIB \"\n            done\n            printf \"%b\\n\"\n            printf \"[$(timestamp)] Creating requirements.txt.%b\\n\"\n            python -m pip freeze > requirements.txt\n        fi\n    fi\n}\n\nfunction pyproj() {\n    # Start a Python project using template files from\n    # https://github.com/geocoug/boilerplate\n    # and either create a Python venv or activate one if it already exists.\n    # Optionally initialize the repository with Git.\n\n    function help() {\n        # Show help documentation.\n        printf \"pyproj, $(timestamp)%b\\n\"\n        printf \"Setup a Python project in the current directory including%b\\n\"\n        printf \"initialization of a virtual Python environment. Optionally initialize%b\\n\"\n        printf \"the repository with git.%b\\n\"\n        printf \"%b\\n\"\n        printf \"Syntax: pyproj [-g|h]%b\\n\"\n        printf \"Options:%b\\n\"\n        printf \"  -g    Initialize the repository with Git.%b\\n\"\n        printf \"  -h    Print this help.%b\\n\"\n    }\n\n    # Number of arguments.\n    # ARGC=$#\n    # By default do not initialize Git.\n    GIT_INIT=false\n    # Template directory to copy files from for a new project.\n    TEMPLATE_DIR=$HOME/GitHub/geocoug/boilerplate\n    # Template files/dirs to copy from $TEMPLATE_DIR\n    declare -a TEMPLATE_FILES=(\".github\" \".gitignore\" \".pre-commit-config.yaml\" \"LICENSE\" \"Makefile\")\n\n    # Argument parser.\n    #  $# = number of function arguments.\n    if [ $# -gt 1 ]\n    then\n        help\n        printf \"Unexpected arguments: \"\n        for i in $*; \n        do \n            printf \"$i \" \n        done\n        printf \"%b\\n\"\n    else\n        if [ $# -gt 0 ]\n        then\n            case \"$1\" in\n                -h) help;;\n                -g) GIT_INIT=true;;\n                *) help;;\n            esac\n        fi \n    fi\n\n    # If \"-g\" option is used, initialize the repository with Git, if it is not already.\n    if $GIT_INIT;\n    then\n        if [ ! -d \".git\" ];\n        then\n            printf \"[$(timestamp)] $(git init)%b\\n\"\n        else\n            printf \"[$(timestamp)] Repository already initialized with Git, skipping.%b\\n\"\n        fi\n    fi\n\n    # Copy starter templates from the template directory\n    printf \"[$(timestamp)] Creating starter templates: \"\n    for FILE in \"${TEMPLATE_FILES[@]}\";\n    do\n        printf \"$FILE \"\n        cp -rf $TEMPLATE_DIR/$FILE .\n    done\n    printf \"%b\\n\"\n\n    # Run pyenv() to create a Python virtual environment if one does not exist.\n    pyenv\n    \n    # Run pipup() to update packages\n    pipup\n}\n\n\n# Custom PATH\nexport PATH=\"$HOME/bin:$PATH\"\nexport PATH=\"/opt/homebrew/opt/openjdk/bin:$PATH\"\nexport PATH=\"/opt/homebrew/opt/ruby/bin:$PATH\"\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\n\nsource /opt/homebrew/opt/powerlevel10k/powerlevel10k.zsh-theme\n\n# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.\n[[ ! -f $HOME/.p10k.zsh ]] || source $HOME/.p10k.zsh\n\n# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.\n[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh\nexport PATH=\"/opt/homebrew/opt/openjdk@11/bin:$PATH\"\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "dotfiles_files"
    ],
    "filters": [],
    "includes": {}
  }
}